// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package jp.com.inotaku.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import jp.com.inotaku.domain.Customer;
import jp.com.inotaku.domain.CustomerAttribute;
import jp.com.inotaku.domain.CustomerAttributeDataOnDemand;
import jp.com.inotaku.repository.CustomerAttributeRepository;
import jp.com.inotaku.service.CustomerAttributeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CustomerAttributeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CustomerAttributeDataOnDemand: @Component;
    
    private Random CustomerAttributeDataOnDemand.rnd = new SecureRandom();
    
    private List<CustomerAttribute> CustomerAttributeDataOnDemand.data;
    
    @Autowired
    CustomerAttributeService CustomerAttributeDataOnDemand.customerAttributeService;
    
    @Autowired
    CustomerAttributeRepository CustomerAttributeDataOnDemand.customerAttributeRepository;
    
    public CustomerAttribute CustomerAttributeDataOnDemand.getNewTransientCustomerAttribute(int index) {
        CustomerAttribute obj = new CustomerAttribute();
        setCustomer(obj, index);
        setCustomerAttrId(obj, index);
        setName(obj, index);
        setValueString(obj, index);
        return obj;
    }
    
    public void CustomerAttributeDataOnDemand.setCustomer(CustomerAttribute obj, int index) {
        Customer customer = null;
        obj.setCustomer(customer);
    }
    
    public void CustomerAttributeDataOnDemand.setCustomerAttrId(CustomerAttribute obj, int index) {
        Long customerAttrId = new Integer(index).longValue();
        obj.setCustomerAttrId(customerAttrId);
    }
    
    public void CustomerAttributeDataOnDemand.setName(CustomerAttribute obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void CustomerAttributeDataOnDemand.setValueString(CustomerAttribute obj, int index) {
        String valueString = "valueString_" + index;
        obj.setValueString(valueString);
    }
    
    public CustomerAttribute CustomerAttributeDataOnDemand.getSpecificCustomerAttribute(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        CustomerAttribute obj = data.get(index);
        Long id = obj.getId();
        return customerAttributeService.findCustomerAttribute(id);
    }
    
    public CustomerAttribute CustomerAttributeDataOnDemand.getRandomCustomerAttribute() {
        init();
        CustomerAttribute obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return customerAttributeService.findCustomerAttribute(id);
    }
    
    public boolean CustomerAttributeDataOnDemand.modifyCustomerAttribute(CustomerAttribute obj) {
        return false;
    }
    
    public void CustomerAttributeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = customerAttributeService.findCustomerAttributeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'CustomerAttribute' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<CustomerAttribute>();
        for (int i = 0; i < 10; i++) {
            CustomerAttribute obj = getNewTransientCustomerAttribute(i);
            try {
                customerAttributeService.saveCustomerAttribute(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            customerAttributeRepository.flush();
            data.add(obj);
        }
    }
    
}
